// Code generated by goagen v1.5.11, DO NOT EDIT.
//
// unnamed API: Application User Types
//
// Command:
// $ main

package app

import (
	goa "github.com/shogo82148/goa-v1"
)

// author user type.
type author struct {
	Country *string `form:"country,omitempty" json:"country,omitempty" yaml:"country,omitempty" xml:"country,omitempty"`
	Name    *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the author type instance.
func (ut *author) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	return
}

// Publicize creates Author from author
func (ut *author) Publicize() *Author {
	var pub Author
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// Author user type.
type Author struct {
	Country *string `form:"country,omitempty" json:"country,omitempty" yaml:"country,omitempty" xml:"country,omitempty"`
	Name    string  `form:"name" json:"name" yaml:"name" xml:"name"`
}

// book user type.
type book struct {
	Author *author `form:"author,omitempty" json:"author,omitempty" yaml:"author,omitempty" xml:"author,omitempty"`
	Title  *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the book type instance.
func (ut *book) Validate() (err error) {
	if ut.Author != nil {
		if err2 := ut.Author.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates Book from book
func (ut *book) Publicize() *Book {
	var pub Book
	if ut.Author != nil {
		pub.Author = ut.Author.Publicize()
	}
	if ut.Title != nil {
		pub.Title = ut.Title
	}
	return &pub
}

// Book user type.
type Book struct {
	Author *Author `form:"author,omitempty" json:"author,omitempty" yaml:"author,omitempty" xml:"author,omitempty"`
	Title  *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the Book type instance.
func (ut *Book) Validate() (err error) {
	if ut.Author != nil {
		if err2 := ut.Author.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
